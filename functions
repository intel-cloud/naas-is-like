# $1 - tenant name
# returns - tenant uuid
function get_tenant_uuid() {
    local ten_name=$1; shift
    echo $(keystone tenant-list | \
           grep "\s$ten_name\s" | awk '{ print $2 }')
}

# $1 - tenant name
# $2 - user name
# returns - user uuid
function get_user_uuid() {
    local ten_name=$1; shift
    local usr_name=$1; shift
    local ten_uuid=$(get_tenant_uuid $ten_name)
    echo $(keystone user-list --tenant-id $ten_uuid | \
           grep "\s$usr_name\s" | awk '{ print $2 }')
}

# $1 - role name
# returns - role uuid
function get_role_uuid() {
    local rol_name=$1; shift
    echo $(keystone role-list | \
           grep "\s$rol_name\s" | awk '{ print $2 }')
}

# $1 - tenant name
# returns - tenant uuid
function create_tenant() {
    local ten_name=$1; shift
    local ten_uuid=$(get_tenant_uuid $ten_name)
    if [ -z $ten_uuid ]
    then
        ten_uuid=$(keystone tenant-create --name $ten_name | \
                   grep "\sid\s" | awk '{ print $4 }')
    fi
    echo $ten_uuid
}

# $1 - tenant name
# $2 - user name
# $3 - user password
# returns - user uuid
function create_user() {
    local ten_name=$1; shift
    local usr_name=$1; shift
    local usr_pass=$1; shift
    local usr_uuid=$(get_user_uuid $ten_name $usr_name)
    if [ -z $usr_uuid ]
    then
        local ten_uuid=$(get_tenant_uuid $ten_name)
        usr_uuid=$(keystone user-create --name $usr_name --pass $usr_pass \
                                        --tenant-id $ten_uuid | \
                   grep "\sid\s" | awk '{ print $4 }')
    else
        keystone user-password-update --pass $usr_pass $usr_uuid
    fi
    echo $usr_uuid
}

# $1 - rol name
# returns - role uuid
function create_role() {
    local rol_name=$1; shift
    local rol_uuid=$(get_role_uuid $rol_name)
    if [ -z $rol_uuid ]
    then
        rol_uuid=$(keystone role-create --name $rol_name | \
                   grep "\sid\s" | awk '{ print $4 }')
    fi
    echo $rol_uuid
}

# $1 - tenant name
# returns - tenant uuid
function init_tenant() {
    local ten_name=$1; shift
    local usr_name=$ten_name
    local usr_pass=$ten_name
    local rol_name=$ten_name
    local ten_uuid=$(create_tenant $ten_name)
    local usr_uuid=$(create_user $ten_name $usr_name $usr_pass)
    if [ -z $(keystone user-role-list --tenant-id $ten_uuid \
                                      --user-id $usr_uuid | \
              grep "\s$rol_name\s" | awk '{ print $2 }') ]
    then
        local rol_uuid=$(create_role $rol_name)
        keystone user-role-add --user-id $usr_uuid \
                               --role-id $rol_uuid \
                               --tenant_id $ten_uuid
    fi
    echo $ten_uuid
}

function get_external_network_uuid() {
    echo $(quantum net-list -- --router:external=True | \
           grep "\s$1\s" | awk '{print $2}')
}

function get_network_uuid() {
    echo $(quantum net-list | grep "\s$1\s" | awk '{print $2}')
}

function create_network() {
    local var=$(get_network_uuid $2)
    if [ -z $var ]
    then
        echo $(quantum net-create --tenant_id $1 $2 | grep "\sid\s" | \
               awk '{ print $4 }')
    else
        echo $var
    fi
}

function get_subnet_uuid() {
    echo $(quantum subnet-list | grep "\s$1\s" | awk '{print $2}')
}

function create_subnet() {
    local var=$(get_subnet_uuid $3)
    if [ -z $var ]
    then
        echo $(quantum subnet-create --tenant_id $1 --ip_version 4 \
               --gateway $4 --name $3 $2 $5 | grep "\sid\s" | \
               awk '{ print $4 }')
    else
        echo $var
    fi
}

function get_router_uuid() {
    echo $(quantum router-list | grep "\s$1\s" | awk '{print $2}')
}

function create_router() {
    local var=$(get_router_uuid $1)
    if [ -z $var ]
    then
        quantum router-create $ROUTER_NAME
    fi
}

function router_has_subnet() {
    if [ -z $(quantum router-port-list $1 | grep "\"$2\"" | awk '{print $2}') ]
    then
        echo false
    else
        echo true
    fi
}

function add_router_subnet_interface() {
    if ! $(router_has_subnet $1 $2)
    then
        quantum router-interface-add $1 $2
    fi
}

function router_has_gateway() {
    if [ -z $(quantum router-show $1 | grep "\"$2\"" | awk '{print $2}') ]
    then
        echo false
    else
        echo true
    fi
}

function set_router_gateway() {
    if ! $(router_has_gateway $1 $2)
    then
        quantum router-gateway-set $1 $2
    fi
}

function get_port_uuid() {
    echo $(quantum port-list | grep "\s$1\s" | awk '{print $2}')
}

function create_port() {
    local var=$(get_port_uuid $3)
    if [ -z $var ]
    then
        echo $(quantum port-create --name $3 \
               --fixed-ip subnet_id=$2,ip_address=$4 $1 \
               | grep "\sid\s" | awk '{print $4}')
    else
        echo $var
    fi
}

function get_image_uuid() {
    local var=$(glance image-list | grep "\s$1\s" | awk '{ print $2 }')
    echo $var
}

function create_image() {
    local imagepath=~/quantal-server-cloudimg-amd64-disk1.img
    local var=$(get_image_uuid $1)
    if [ -z $var ] && [ -r $imagepath ]
    then
        var=$(glance image-create --name $1 --is-public True \
              --disk-format qcow2 --container-format ovf --file $imagepath | \
              grep "\sid\s" | awk '{ print $4 }')
    fi
    echo $var
}

function get_keypair_name() {
    local keypath=~/.ssh/id_rsa.pub
    local var=$(nova keypair-list | grep "\s$1\s" | awk '{ print $2 }')
    if [ -z $var ] && [ -r $keypath ]
    then
        nova keypair-add --pub-key $keypath $1
        var=$(nova keypair-list | grep "\s$1\s" | awk '{ print $2 }')
    fi
    echo $var
}

function add_default_sg_rules() {
    local var=$(nova secgroup-list-rules default | \
                grep -E "$1.+$2.+$3.+$4" | awk '{ print $2 }')
    if [ -z $var ]
    then
        nova secgroup-add-rule default $1 $2 $3 $4
    fi
}

function get_instance_uuid() {
    local var=$(nova list | grep "\s$1\s" | awk '{ print $2 }')
    echo $var
}

function boot_instance() {
    local var=$(get_instance_uuid $2)
    if [ -z $var ]
    then
        nova boot --image $3 --flavor $4 --nic port-id=$1 --key-name $5 \
        --poll $2
    fi
}

function boot_instance_dhcp() {
    local var=$(get_instance_uuid $2)
    if [ -z $var ]
    then
        nova boot --image $3 --flavor $4 --nic net-id=$1 --key-name $5 \
        --poll $2
    fi
}

function get_public_ip_on_port() {
    # TODO(zyluo): Optimize to "quantum floatingip-list -- --port_id=ZZZ"
    echo $(quantum floatingip-list | grep "\s$1\s" | awk '{ print $6 }')
}

function associate_public_ip_on_port() {
    local var=$(get_public_ip_on_port $1)
    if [ -z $var ]
    then
        quantum floatingip-create --port_id $1 $2
    fi
}

